import random

def go(direction): # player chooses direction to go
    print('Which way would you like to go?')
    

def look(inRoom): #lets player inspect stats, monsters and parts of rooms etc
    print('What would you like to look at?')
    looked = input().lower()
    if looked in inRoom:
        print('You looked at', looked + '.')
    else:
        print('That isn\'t in the room!')
    run(inRoom)

def newGame(): # runs as soon as game starts
    print('''Rickard's Quest
To start a new game, enter "s".
To quit, press "q".''')
    if input() == 's'.lower():
        print("Would you like to see the introduction?")
        if input() == 'y'.lower():
            gameIntro()
        else:
            newRoom()
            
def gameOver(): # ends game and allows to start new game
    print('You have failed to complete your quest.')
    print('Press "s" to start a new game.')
    if input() == 's':
        newGame()

def battle(player, enemy): #choose enemy and fight them
    enemy = random.randint(0, len(monsters)-1)
    enemy = str(monsters[enemy])
    print('A', enemy + ' is in the room!  It looks like it wants to fight.')
    while rickard.HP > 0:
        print('What would you like to do?')
        action = input().lower()
        if action in commands:
            game_state(commands[action])
        else:
            print('That isn\'t something you can do right now!')
            
def attack(player, enemy): # determines if your attack is higher than enemy defense
    try:
        game_state[battle]
    except:
        print('You aren\'t fighting anything right now!')
    if player.attack >= enemy.defense:
        damage = random.randint(1, 3)
        enemyHP -= damage
        print('You hit!  The enemy takes ' + damage + ' damage.')
    else:
        damage = random.randint(1,3)
        yourHP -= damage
        print('The enemy blocks your attack and attacks back.  You take ' + damage + ' damage.')

def block(player, enemy):
    try:
        game_state[battle]
    except:
        print('You aren\'t fighting anything right now!')
    if player.defense >= enemy.defense:
        print('You blocked the enemy attack!')
    else:
        damage = random.randint(1, 3)
        yourHP -= damage
        print('Your block failed!  You get hit for ' + damage + ' damage.')

def cast(player):
    try:
        print('Which spell will you cast?')
        print(player.spells)
    except:
        print('You don\'t currently have any spells!')
      
commands = {'go':go, 'look':look, 'attack':attack, 'block':block, 'cast':cast}
##battleComm = ['look', 'run', 'attack', 'block', 'spell']
roomAdj = ['square', 'dark', 'damp', 'large', 'smelly', 'bright', 'sinister']
inRoom = ['room', 'rickard', 'me', 'self', 'chest', 'door', 'wall']
game_state = {'in room':inRoom, 'game over':False, 'battle':battle}

class creature(object):
    def __init__(self, name, defense, attack, HP):
        self.name = name
        self.defense = defense
        self.attack = attack
        self.HP = HP

class player(creature):
    def __init__(self, name, defense, attack, HP, spells, inventory, weapon):
        super().__init__(name, defense, attack, HP)
        self.spells = spells
        self.inventory = inventory
        self.weapon = weapon
        
rickard = player('Rickard', 5, 5, 10, '', '', '')
orc = creature('orc', 3, 3, 6)
skeleton = creature('skeleton', 2, 1, 3)
goblin = creature('goblin', 1, 2, 4)
monsters = [orc.name, skeleton.name, goblin.name]

class weapon(object):
    def __init__(self, name, attack, defense, special):
        self.name = name
        self.attack = attack
        self.defense = defense
        self.special = special

class spell(object):
    def __init__(self, name, effect, cooldown):
        self.name = name
        self.effect = effect
        self.cooldown = cooldown
        
def run(game_state): #allows player to enter commands
    while True:
        choice = input('Enter a command.').lower()
        if choice in commands:
            game_state = commands[choice](game_state)
            if game_state['game over']: # ends game if player loses
                gameOver()
        else:
            print('You can\'t do that!')

def gameIntro(): # just intro story so that player can skip if they want
    print('''A whole bunch
of text will go here.
Story about how Rickard's teacher
needs him to do something.''')
    print('You enter the mouth of the cave.')
    newRoom()

def newRoom(): # gens a new random room every time a new room is entered
    thisRoom = random.randint(0, len(roomAdj)-1)
    thisRoom = roomAdj[thisRoom]
    print('You have entered a ', thisRoom, ' room.')
    encounter = random.randint(0, 1) # determines whether a monster is in the room
    if encounter == 1:
        run(battle)
    else:
        run(inRoom)

def needHelp():
    if input().lower() == 'help':
        print(commands)
    

#classes for spells and weapons


